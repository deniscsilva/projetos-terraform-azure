Você é um engenheiro DevOps, você tem uma tarefa para criar umas infraestrura na azure usando Iac, utilizando a ferramenta terraform.

Tarefas:
- Crie uma pasta chamada terraform-dynamic-block-linux; 
- adentre nessa pasta para criamos a estrutura;
- Nessa estrutura iremos utilizar modulos;
- Crie no root os arquivos main.tf, output.tf, variebles, provider.tf e prd.tfvars;
- Crie o múdulo vm-linux e os arquivos main.tf, output.tf, variebles;

# No moódulo iremos criar a estrutura:
- Crie o bloco data para consumir  para conumir o recurso key vaul na azure, nome dele: dcs_keyvault, nome do resource group existente: rg-dcs-kv
- Crie o bloco data key vault secret para consumir o key vault dcs_keyvault, me dando a saída do id dele

# Crie um resource group chamado rg-dcs-linux-02 e dentro dele Crie: (com flexibilidade e reaproveitamento de código usando variaveis)
- 1 VNET cidr block [10.0.0.0/16]
- 2 Subnets com for-each ou count (use o melhor para o cenário) [10.0.1.0/24] [10.0.2.0/24]
- 2 NSG liberando as portas 80, 443 e 22. Use for-each ou count (use o melhor para o cenário)
- Vamos precisa de 2 network interface connection (NIC), uma para cada maquina, se necessário usar count ou for-each
- 2 public IP, uma para cada maquina, se necessário usar count ou for-each
- 2 VMs Linux com ubuntu 24.04 LTS, uma em cada subnet, essas VMs irão se autenticar com user: adminuser e valor do password armazenado no key vault secret
- configure as devidas associações entre recursos

#Variaveis
Crie as variaveis no módulo no arquivo variaveis.tf

#output
Crie o a saída dos IPs públicos no output.tf

# No main do root configure:

- Backend

# Setting Block
terraform {
  backend "azurerm" {
    resource_group_name  = "rg-state-remote"
    storage_account_name = "dcsterraformbackend"
    container_name       = "state-backend"
    key                  = "terraform4.tfstate"
  }

  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "4.37.0"
    }
  }
}

- faça a herança do módulo acima com suas variaveis;

# Variaveis do root
- Crie as entradas das variaveis que irão alimentar o projeto em variaveis.tf

# output do root
- Crie o output com com os IPs publicos no output.tf do root

# Crie o provider.tf (Uso o direnv (arquivo .envrc )já com as credenciais do provider configurados, bem como de acesso do backend configurado no main.tf)

# Provider Block
provider "azurerm" {
  features {}
}

# Defina o prd.tfvars
- Escreva o valor das variaveis

# Nomeação de recurso
- Nomeie os recursos:
prefixo: dcs-lnx2-(nome tipo de recursos ao que o bloco se refere)

- Nomeie os recursos:
prefixo: dcs_lnx2_(recurso)

# gitignore
Crie o .gitignore conforme as melhores praticas.
